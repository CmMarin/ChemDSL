
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ACID_BASE ALGEBRAIC ANALYZE AQUEOUS ARROW ASSIGN BALANCE CARET CATALYST COMBUSTION COMMA COMPOUND DECOMPOSITION DOUBLE_REPLACEMENT ELEMENT ELEMENT_SYMBOL EMPIRICAL_FORMULA ENTHALPY ENTROPY EQUALS EQUILIBRIUM FLOAT FOR GAS GAS_FORMATION GIBBS_ENERGY HALF_REACTION HEAT IDENTIFIER INFO INTEGER LBRACE LBRACKET LIMITING_REAGENT LIQUID LPAREN MOLARITY MOLAR_MASS MOLECULAR_FORMULA NEGATIVE NORMALITY OF OXIDATION_NUMBER OXIDATION_STATES PERCENT_YIELD PH PLUS POSITIVE PRECIPITATION PREDICT PRESSURE QUERY RBRACE RBRACKET REACTION REACTION_TYPE REDOX RESONANCE_ARROW REVERSIBLE_ARROW RPAREN SEMICOLON SINGLE_REPLACEMENT SOLID STRING TEMPERATURE TIME WITH YIELDprogram : statement_liststatement_list : statement SEMICOLON statement_list\n                     | statement SEMICOLONstatement : balance_statement\n                 | predict_statement\n                 | analyze_statement\n                 | reaction_type_statement\n                 | thermodynamic_statement\n                 | chemical_analysis_statementbalance_statement : BALANCE reaction_exprpredict_statement : PREDICT reactants_expranalyze_statement : ANALYZE molecule\n                         | ANALYZE molecule FOR IDENTIFIERreaction_type_statement : COMBUSTION\n                               | DECOMPOSITION\n                               | SINGLE_REPLACEMENT\n                               | DOUBLE_REPLACEMENT\n                               | ACID_BASE\n                               | PRECIPITATION\n                               | GAS_FORMATION\n                               | COMBUSTION OF molecule\n                               | DECOMPOSITION OF molecule\n                               | SINGLE_REPLACEMENT OF molecule\n                               | DOUBLE_REPLACEMENT OF molecule\n                               | ACID_BASE OF molecule\n                               | PRECIPITATION OF molecule\n                               | GAS_FORMATION OF moleculethermodynamic_statement : ENTHALPY OF reaction_expr\n                               | ENTROPY OF reaction_expr\n                               | GIBBS_ENERGY OF reaction_expr\n                               | EQUILIBRIUM OF reaction_expr\n                               | ENTHALPY INFO reaction_expr\n                               | ENTROPY INFO reaction_expr\n                               | GIBBS_ENERGY INFO reaction_expr\n                               | EQUILIBRIUM INFO reaction_exprchemical_analysis_statement : OXIDATION_STATES OF molecule\n                                   | LIMITING_REAGENT OF reaction_expr\n                                   | PERCENT_YIELD OF reaction_expr\n                                   | EMPIRICAL_FORMULA OF molecule\n                                   | MOLECULAR_FORMULA OF molecule\n                                   | MOLAR_MASS OF moleculereaction_expr : reactants_expr ARROW products_exprreactants_expr : chemical_term_listproducts_expr : chemical_term_listchemical_term_list : chemical_term PLUS chemical_term_list\n                          | chemical_termchemical_term : INTEGER molecule\n                     | moleculemolecule : molecule_part molecule\n                | molecule_partmolecule_part : element_group\n                     | LPAREN molecule RPAREN INTEGERelement_group : ELEMENT_SYMBOL INTEGER\n                     | ELEMENT_SYMBOL'
    
_lr_action_items = {'BALANCE':([0,30,],[10,10,]),'PREDICT':([0,30,],[11,11,]),'ANALYZE':([0,30,],[12,12,]),'COMBUSTION':([0,30,],[13,13,]),'DECOMPOSITION':([0,30,],[14,14,]),'SINGLE_REPLACEMENT':([0,30,],[15,15,]),'DOUBLE_REPLACEMENT':([0,30,],[16,16,]),'ACID_BASE':([0,30,],[17,17,]),'PRECIPITATION':([0,30,],[18,18,]),'GAS_FORMATION':([0,30,],[19,19,]),'ENTHALPY':([0,30,],[20,20,]),'ENTROPY':([0,30,],[21,21,]),'GIBBS_ENERGY':([0,30,],[22,22,]),'EQUILIBRIUM':([0,30,],[23,23,]),'OXIDATION_STATES':([0,30,],[24,24,]),'LIMITING_REAGENT':([0,30,],[25,25,]),'PERCENT_YIELD':([0,30,],[26,26,]),'EMPIRICAL_FORMULA':([0,30,],[27,27,]),'MOLECULAR_FORMULA':([0,30,],[28,28,]),'MOLAR_MASS':([0,30,],[29,29,]),'$end':([1,2,30,64,],[0,-1,-3,-2,]),'SEMICOLON':([3,4,5,6,7,8,9,13,14,15,16,17,18,19,31,33,34,36,37,38,40,41,42,67,68,70,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,97,98,],[30,-4,-5,-6,-7,-8,-9,-14,-15,-16,-17,-18,-19,-20,-10,-43,-46,-48,-50,-51,-54,-11,-12,-47,-49,-53,-21,-22,-23,-24,-25,-26,-27,-28,-32,-29,-33,-30,-34,-31,-35,-36,-37,-38,-39,-40,-41,-42,-44,-45,-13,-52,]),'INTEGER':([10,11,40,50,51,52,53,54,55,56,57,59,60,65,66,96,],[35,35,70,35,35,35,35,35,35,35,35,35,35,35,35,98,]),'LPAREN':([10,11,12,35,37,38,39,40,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,66,70,98,],[39,39,39,39,39,-51,39,-54,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,-53,-52,]),'ELEMENT_SYMBOL':([10,11,12,35,37,38,39,40,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,66,70,98,],[40,40,40,40,40,-51,40,-54,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,-53,-52,]),'OF':([13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,],[43,44,45,46,47,48,49,50,52,54,56,58,59,60,61,62,63,]),'INFO':([20,21,22,23,],[51,53,55,57,]),'ARROW':([32,33,34,36,37,38,40,67,68,70,95,98,],[65,-43,-46,-48,-50,-51,-54,-47,-49,-53,-45,-52,]),'PLUS':([34,36,37,38,40,67,68,70,98,],[66,-48,-50,-51,-54,-47,-49,-53,-52,]),'FOR':([37,38,40,42,68,70,98,],[-50,-51,-54,71,-49,-53,-52,]),'RPAREN':([37,38,40,68,69,70,98,],[-50,-51,-54,-49,96,-53,-52,]),'IDENTIFIER':([71,],[97,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,30,],[2,64,]),'statement':([0,30,],[3,3,]),'balance_statement':([0,30,],[4,4,]),'predict_statement':([0,30,],[5,5,]),'analyze_statement':([0,30,],[6,6,]),'reaction_type_statement':([0,30,],[7,7,]),'thermodynamic_statement':([0,30,],[8,8,]),'chemical_analysis_statement':([0,30,],[9,9,]),'reaction_expr':([10,50,51,52,53,54,55,56,57,59,60,],[31,79,80,81,82,83,84,85,86,88,89,]),'reactants_expr':([10,11,50,51,52,53,54,55,56,57,59,60,],[32,41,32,32,32,32,32,32,32,32,32,32,]),'chemical_term_list':([10,11,50,51,52,53,54,55,56,57,59,60,65,66,],[33,33,33,33,33,33,33,33,33,33,33,33,94,95,]),'chemical_term':([10,11,50,51,52,53,54,55,56,57,59,60,65,66,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'molecule':([10,11,12,35,37,39,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,66,],[36,36,42,67,68,69,72,73,74,75,76,77,78,36,36,36,36,36,36,36,36,87,36,36,90,91,92,36,36,]),'molecule_part':([10,11,12,35,37,39,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,66,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'element_group':([10,11,12,35,37,39,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,65,66,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'products_expr':([65,],[93,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',13),
  ('statement_list -> statement SEMICOLON statement_list','statement_list',3,'p_statement_list','parser.py',18),
  ('statement_list -> statement SEMICOLON','statement_list',2,'p_statement_list','parser.py',19),
  ('statement -> balance_statement','statement',1,'p_statement','parser.py',23),
  ('statement -> predict_statement','statement',1,'p_statement','parser.py',24),
  ('statement -> analyze_statement','statement',1,'p_statement','parser.py',25),
  ('statement -> reaction_type_statement','statement',1,'p_statement','parser.py',26),
  ('statement -> thermodynamic_statement','statement',1,'p_statement','parser.py',27),
  ('statement -> chemical_analysis_statement','statement',1,'p_statement','parser.py',28),
  ('balance_statement -> BALANCE reaction_expr','balance_statement',2,'p_balance_statement','parser.py',33),
  ('predict_statement -> PREDICT reactants_expr','predict_statement',2,'p_predict_statement','parser.py',38),
  ('analyze_statement -> ANALYZE molecule','analyze_statement',2,'p_analyze_statement','parser.py',44),
  ('analyze_statement -> ANALYZE molecule FOR IDENTIFIER','analyze_statement',4,'p_analyze_statement','parser.py',45),
  ('reaction_type_statement -> COMBUSTION','reaction_type_statement',1,'p_reaction_type_statement','parser.py',55),
  ('reaction_type_statement -> DECOMPOSITION','reaction_type_statement',1,'p_reaction_type_statement','parser.py',56),
  ('reaction_type_statement -> SINGLE_REPLACEMENT','reaction_type_statement',1,'p_reaction_type_statement','parser.py',57),
  ('reaction_type_statement -> DOUBLE_REPLACEMENT','reaction_type_statement',1,'p_reaction_type_statement','parser.py',58),
  ('reaction_type_statement -> ACID_BASE','reaction_type_statement',1,'p_reaction_type_statement','parser.py',59),
  ('reaction_type_statement -> PRECIPITATION','reaction_type_statement',1,'p_reaction_type_statement','parser.py',60),
  ('reaction_type_statement -> GAS_FORMATION','reaction_type_statement',1,'p_reaction_type_statement','parser.py',61),
  ('reaction_type_statement -> COMBUSTION OF molecule','reaction_type_statement',3,'p_reaction_type_statement','parser.py',62),
  ('reaction_type_statement -> DECOMPOSITION OF molecule','reaction_type_statement',3,'p_reaction_type_statement','parser.py',63),
  ('reaction_type_statement -> SINGLE_REPLACEMENT OF molecule','reaction_type_statement',3,'p_reaction_type_statement','parser.py',64),
  ('reaction_type_statement -> DOUBLE_REPLACEMENT OF molecule','reaction_type_statement',3,'p_reaction_type_statement','parser.py',65),
  ('reaction_type_statement -> ACID_BASE OF molecule','reaction_type_statement',3,'p_reaction_type_statement','parser.py',66),
  ('reaction_type_statement -> PRECIPITATION OF molecule','reaction_type_statement',3,'p_reaction_type_statement','parser.py',67),
  ('reaction_type_statement -> GAS_FORMATION OF molecule','reaction_type_statement',3,'p_reaction_type_statement','parser.py',68),
  ('thermodynamic_statement -> ENTHALPY OF reaction_expr','thermodynamic_statement',3,'p_thermodynamic_statement','parser.py',75),
  ('thermodynamic_statement -> ENTROPY OF reaction_expr','thermodynamic_statement',3,'p_thermodynamic_statement','parser.py',76),
  ('thermodynamic_statement -> GIBBS_ENERGY OF reaction_expr','thermodynamic_statement',3,'p_thermodynamic_statement','parser.py',77),
  ('thermodynamic_statement -> EQUILIBRIUM OF reaction_expr','thermodynamic_statement',3,'p_thermodynamic_statement','parser.py',78),
  ('thermodynamic_statement -> ENTHALPY INFO reaction_expr','thermodynamic_statement',3,'p_thermodynamic_statement','parser.py',79),
  ('thermodynamic_statement -> ENTROPY INFO reaction_expr','thermodynamic_statement',3,'p_thermodynamic_statement','parser.py',80),
  ('thermodynamic_statement -> GIBBS_ENERGY INFO reaction_expr','thermodynamic_statement',3,'p_thermodynamic_statement','parser.py',81),
  ('thermodynamic_statement -> EQUILIBRIUM INFO reaction_expr','thermodynamic_statement',3,'p_thermodynamic_statement','parser.py',82),
  ('chemical_analysis_statement -> OXIDATION_STATES OF molecule','chemical_analysis_statement',3,'p_chemical_analysis_statement','parser.py',90),
  ('chemical_analysis_statement -> LIMITING_REAGENT OF reaction_expr','chemical_analysis_statement',3,'p_chemical_analysis_statement','parser.py',91),
  ('chemical_analysis_statement -> PERCENT_YIELD OF reaction_expr','chemical_analysis_statement',3,'p_chemical_analysis_statement','parser.py',92),
  ('chemical_analysis_statement -> EMPIRICAL_FORMULA OF molecule','chemical_analysis_statement',3,'p_chemical_analysis_statement','parser.py',93),
  ('chemical_analysis_statement -> MOLECULAR_FORMULA OF molecule','chemical_analysis_statement',3,'p_chemical_analysis_statement','parser.py',94),
  ('chemical_analysis_statement -> MOLAR_MASS OF molecule','chemical_analysis_statement',3,'p_chemical_analysis_statement','parser.py',95),
  ('reaction_expr -> reactants_expr ARROW products_expr','reaction_expr',3,'p_reaction_expr','parser.py',99),
  ('reactants_expr -> chemical_term_list','reactants_expr',1,'p_reactants_expr','parser.py',103),
  ('products_expr -> chemical_term_list','products_expr',1,'p_products_expr','parser.py',107),
  ('chemical_term_list -> chemical_term PLUS chemical_term_list','chemical_term_list',3,'p_chemical_term_list','parser.py',111),
  ('chemical_term_list -> chemical_term','chemical_term_list',1,'p_chemical_term_list','parser.py',112),
  ('chemical_term -> INTEGER molecule','chemical_term',2,'p_chemical_term','parser.py',116),
  ('chemical_term -> molecule','chemical_term',1,'p_chemical_term','parser.py',117),
  ('molecule -> molecule_part molecule','molecule',2,'p_molecule','parser.py',126),
  ('molecule -> molecule_part','molecule',1,'p_molecule','parser.py',127),
  ('molecule_part -> element_group','molecule_part',1,'p_molecule_part','parser.py',136),
  ('molecule_part -> LPAREN molecule RPAREN INTEGER','molecule_part',4,'p_molecule_part','parser.py',137),
  ('element_group -> ELEMENT_SYMBOL INTEGER','element_group',2,'p_element_group','parser.py',150),
  ('element_group -> ELEMENT_SYMBOL','element_group',1,'p_element_group','parser.py',151),
]
