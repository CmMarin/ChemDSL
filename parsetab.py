
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ACID_BASE ARROW BALANCE COMBUSTION DECOMPOSITION DIGITS DOUBLE_REPLACEMENT ELEMENT_SYMBOL OF PLUS PRECIPITATION PREDICT REDOX SEMICOLON SINGLE_REPLACEMENT SYNTHESISprogram : statement_liststatement_list : statement SEMICOLON statement_liststatement_list : statement SEMICOLONpredict_statement : PREDICT COMBUSTION OF reactants_exprpredict_statement : PREDICT SYNTHESIS OF reactants_exprpredict_statement : PREDICT DECOMPOSITION OF reactants_exprpredict_statement : PREDICT SINGLE_REPLACEMENT OF reactants_exprpredict_statement : PREDICT DOUBLE_REPLACEMENT OF reactants_exprpredict_statement : PREDICT PRECIPITATION OF reactants_exprpredict_statement : PREDICT REDOX OF reactants_exprpredict_statement : PREDICT ACID_BASE OF reactants_exprpredict_statement : PREDICT reactants_exprstatement : balance_statement\n                 | predict_statementbalance_statement : BALANCE reaction_exprreaction_expr : reactants_expr ARROW products_exprreactants_expr : chemical_term_listproducts_expr : chemical_term_listchemical_term_list : chemical_term PLUS chemical_term_listchemical_term_list : chemical_termchemical_term : coefficient chemical_expr\n                     | chemical_exprcoefficient : DIGITSchemical_expr : moleculemolecule : molecule element_groupmolecule : element_groupelement_group : ELEMENT_SYMBOL DIGITSelement_group : ELEMENT_SYMBOL'
    
_lr_action_items = {'BALANCE':([0,8,],[6,6,]),'PREDICT':([0,8,],[7,7,]),'$end':([1,2,8,28,],[0,-1,-3,-2,]),'SEMICOLON':([3,4,5,9,11,12,14,16,17,18,20,31,32,33,42,43,44,45,46,47,48,49,50,51,52,],[8,-13,-14,-15,-17,-20,-22,-24,-26,-28,-12,-21,-25,-27,-16,-18,-19,-4,-5,-6,-7,-8,-9,-10,-11,]),'DIGITS':([6,7,18,29,30,34,35,36,37,38,39,40,41,],[15,15,33,15,15,15,15,15,15,15,15,15,15,]),'ELEMENT_SYMBOL':([6,7,13,15,16,17,18,29,30,32,33,34,35,36,37,38,39,40,41,],[18,18,18,-23,18,-26,-28,18,18,-25,-27,18,18,18,18,18,18,18,18,]),'COMBUSTION':([7,],[19,]),'SYNTHESIS':([7,],[21,]),'DECOMPOSITION':([7,],[22,]),'SINGLE_REPLACEMENT':([7,],[23,]),'DOUBLE_REPLACEMENT':([7,],[24,]),'PRECIPITATION':([7,],[25,]),'REDOX':([7,],[26,]),'ACID_BASE':([7,],[27,]),'ARROW':([10,11,12,14,16,17,18,31,32,33,44,],[29,-17,-20,-22,-24,-26,-28,-21,-25,-27,-19,]),'PLUS':([12,14,16,17,18,31,32,33,],[30,-22,-24,-26,-28,-21,-25,-27,]),'OF':([19,21,22,23,24,25,26,27,],[34,35,36,37,38,39,40,41,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,8,],[2,28,]),'statement':([0,8,],[3,3,]),'balance_statement':([0,8,],[4,4,]),'predict_statement':([0,8,],[5,5,]),'reaction_expr':([6,],[9,]),'reactants_expr':([6,7,34,35,36,37,38,39,40,41,],[10,20,45,46,47,48,49,50,51,52,]),'chemical_term_list':([6,7,29,30,34,35,36,37,38,39,40,41,],[11,11,43,44,11,11,11,11,11,11,11,11,]),'chemical_term':([6,7,29,30,34,35,36,37,38,39,40,41,],[12,12,12,12,12,12,12,12,12,12,12,12,]),'coefficient':([6,7,29,30,34,35,36,37,38,39,40,41,],[13,13,13,13,13,13,13,13,13,13,13,13,]),'chemical_expr':([6,7,13,29,30,34,35,36,37,38,39,40,41,],[14,14,31,14,14,14,14,14,14,14,14,14,14,]),'molecule':([6,7,13,29,30,34,35,36,37,38,39,40,41,],[16,16,16,16,16,16,16,16,16,16,16,16,16,]),'element_group':([6,7,13,16,29,30,34,35,36,37,38,39,40,41,],[17,17,17,32,17,17,17,17,17,17,17,17,17,17,]),'products_expr':([29,],[42,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','test1.py',54),
  ('statement_list -> statement SEMICOLON statement_list','statement_list',3,'p_statement_list_multiple','test1.py',58),
  ('statement_list -> statement SEMICOLON','statement_list',2,'p_statement_list_single','test1.py',62),
  ('predict_statement -> PREDICT COMBUSTION OF reactants_expr','predict_statement',4,'p_predict_statement_combustion','test1.py',66),
  ('predict_statement -> PREDICT SYNTHESIS OF reactants_expr','predict_statement',4,'p_predict_statement_synthesis','test1.py',70),
  ('predict_statement -> PREDICT DECOMPOSITION OF reactants_expr','predict_statement',4,'p_predict_statement_decomposition','test1.py',74),
  ('predict_statement -> PREDICT SINGLE_REPLACEMENT OF reactants_expr','predict_statement',4,'p_predict_statement_single_replacement','test1.py',78),
  ('predict_statement -> PREDICT DOUBLE_REPLACEMENT OF reactants_expr','predict_statement',4,'p_predict_statement_double_replacement','test1.py',82),
  ('predict_statement -> PREDICT PRECIPITATION OF reactants_expr','predict_statement',4,'p_predict_statement_precipitation','test1.py',86),
  ('predict_statement -> PREDICT REDOX OF reactants_expr','predict_statement',4,'p_predict_statement_redox','test1.py',90),
  ('predict_statement -> PREDICT ACID_BASE OF reactants_expr','predict_statement',4,'p_predict_statement_acid_base','test1.py',94),
  ('predict_statement -> PREDICT reactants_expr','predict_statement',2,'p_predict_statement','test1.py',98),
  ('statement -> balance_statement','statement',1,'p_statement','test1.py',102),
  ('statement -> predict_statement','statement',1,'p_statement','test1.py',103),
  ('balance_statement -> BALANCE reaction_expr','balance_statement',2,'p_balance_statement','test1.py',107),
  ('reaction_expr -> reactants_expr ARROW products_expr','reaction_expr',3,'p_reaction_expr','test1.py',111),
  ('reactants_expr -> chemical_term_list','reactants_expr',1,'p_reactants_expr','test1.py',115),
  ('products_expr -> chemical_term_list','products_expr',1,'p_products_expr','test1.py',119),
  ('chemical_term_list -> chemical_term PLUS chemical_term_list','chemical_term_list',3,'p_chemical_term_list_multiple','test1.py',123),
  ('chemical_term_list -> chemical_term','chemical_term_list',1,'p_chemical_term_list_single','test1.py',127),
  ('chemical_term -> coefficient chemical_expr','chemical_term',2,'p_chemical_term','test1.py',131),
  ('chemical_term -> chemical_expr','chemical_term',1,'p_chemical_term','test1.py',132),
  ('coefficient -> DIGITS','coefficient',1,'p_coefficient','test1.py',139),
  ('chemical_expr -> molecule','chemical_expr',1,'p_chemical_expr','test1.py',143),
  ('molecule -> molecule element_group','molecule',2,'p_molecule_multiple','test1.py',147),
  ('molecule -> element_group','molecule',1,'p_molecule_single','test1.py',151),
  ('element_group -> ELEMENT_SYMBOL DIGITS','element_group',2,'p_element_group_with_digits','test1.py',155),
  ('element_group -> ELEMENT_SYMBOL','element_group',1,'p_element_group_single','test1.py',159),
]
